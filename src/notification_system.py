#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
H·ªá th·ªëng th√¥ng b√°o v√† monitoring cho vi·ªác thu th·∫≠p d·ªØ li·ªáu x·ªï s·ªë
"""

import json
import os
import smtplib
from datetime import datetime
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from typing import Dict, List, Optional
import structlog
from pathlib import Path

logger = structlog.get_logger()


class NotificationSystem:
    """H·ªá th·ªëng th√¥ng b√°o v√† monitoring"""
    
    def __init__(self, data_dir: str = "data"):
        self.data_dir = Path(data_dir)
        self.log_file = self.data_dir / "system.log"
        self.status_file = self.data_dir / "last_run_status.json"
        
        # C·∫•u h√¨nh email (t·ª´ environment variables)
        self.email_config = {
            'smtp_server': os.getenv('SMTP_SERVER', 'smtp.gmail.com'),
            'smtp_port': int(os.getenv('SMTP_PORT', '587')),
            'sender_email': os.getenv('SENDER_EMAIL'),
            'sender_password': os.getenv('SENDER_PASSWORD'),
            'recipient_emails': os.getenv('RECIPIENT_EMAILS', '').split(',')
        }
        
        # Webhook URLs (Discord, Slack, etc.)
        self.webhook_urls = {
            'discord': os.getenv('DISCORD_WEBHOOK_URL'),
            'slack': os.getenv('SLACK_WEBHOOK_URL')
        }
    
    def log_status(self, status: str, message: str, details: Optional[Dict] = None):
        """Ghi log tr·∫°ng th√°i h·ªá th·ªëng"""
        log_entry = {
            'timestamp': datetime.now().isoformat(),
            'status': status,
            'message': message,
            'details': details or {}
        }
        
        # Ghi v√†o file log
        try:
            with open(self.log_file, 'a', encoding='utf-8') as f:
                f.write(json.dumps(log_entry, ensure_ascii=False) + '\n')
        except Exception as e:
            logger.error("L·ªói ghi log", error=str(e))
        
        # Ghi v√†o status file
        try:
            with open(self.status_file, 'w', encoding='utf-8') as f:
                json.dump(log_entry, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error("L·ªói ghi status", error=str(e))
        
        logger.info("ƒê√£ ghi log", status=status, message=message)
    
    def send_email_notification(self, subject: str, body: str, is_html: bool = False) -> bool:
        """G·ª≠i th√¥ng b√°o qua email"""
        if not self.email_config['sender_email'] or not self.email_config['sender_password']:
            logger.warning("Ch∆∞a c·∫•u h√¨nh email, b·ªè qua g·ª≠i th√¥ng b√°o")
            return False
        
        try:
            msg = MIMEMultipart()
            msg['From'] = self.email_config['sender_email']
            msg['To'] = ', '.join(self.email_config['recipient_emails'])
            msg['Subject'] = subject
            
            msg.attach(MIMEText(body, 'html' if is_html else 'plain', 'utf-8'))
            
            server = smtplib.SMTP(self.email_config['smtp_server'], self.email_config['smtp_port'])
            server.starttls()
            server.login(self.email_config['sender_email'], self.email_config['sender_password'])
            
            text = msg.as_string()
            server.sendmail(
                self.email_config['sender_email'],
                self.email_config['recipient_emails'],
                text
            )
            server.quit()
            
            logger.info("ƒê√£ g·ª≠i email th√¥ng b√°o")
            return True
            
        except Exception as e:
            logger.error("L·ªói g·ª≠i email", error=str(e))
            return False
    
    def send_webhook_notification(self, message: str, webhook_type: str = 'discord') -> bool:
        """G·ª≠i th√¥ng b√°o qua webhook (Discord, Slack)"""
        webhook_url = self.webhook_urls.get(webhook_type)
        
        if not webhook_url:
            logger.warning(f"Ch∆∞a c·∫•u h√¨nh {webhook_type} webhook")
            return False
        
        try:
            import requests
            
            if webhook_type == 'discord':
                payload = {'content': message}
            elif webhook_type == 'slack':
                payload = {'text': message}
            else:
                payload = {'message': message}
            
            response = requests.post(webhook_url, json=payload, timeout=10)
            response.raise_for_status()
            
            logger.info(f"ƒê√£ g·ª≠i {webhook_type} notification")
            return True
            
        except Exception as e:
            logger.error(f"L·ªói g·ª≠i {webhook_type} notification", error=str(e))
            return False
    
    def notify_success(self, data: Dict):
        """Th√¥ng b√°o khi thu th·∫≠p d·ªØ li·ªáu th√†nh c√¥ng"""
        date = data.get('date', 'N/A')
        source = data.get('source', 'N/A')
        
        # Log status
        self.log_status(
            'SUCCESS',
            f'Thu th·∫≠p d·ªØ li·ªáu th√†nh c√¥ng cho ng√†y {date}',
            {'date': date, 'source': source}
        )
        
        # T·∫°o th√¥ng b√°o
        subject = f"‚úÖ Thu th·∫≠p x·ªï s·ªë th√†nh c√¥ng - {date}"
        message = f"""
üé≤ **B√°o c√°o thu th·∫≠p d·ªØ li·ªáu x·ªï s·ªë mi·ªÅn B·∫Øc**

‚úÖ **Tr·∫°ng th√°i:** Th√†nh c√¥ng
üìÖ **Ng√†y:** {date}
üåê **Ngu·ªìn:** {source}
‚è∞ **Th·ªùi gian:** {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}

D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u tr·ªØ th√†nh c√¥ng v√†o h·ªá th·ªëng.
        """.strip()
        
        # G·ª≠i th√¥ng b√°o qua c√°c k√™nh
        self.send_webhook_notification(message, 'discord')
        
        # Email chi ti·∫øt h∆°n
        email_body = f"""
        <h2>üé≤ B√°o c√°o thu th·∫≠p d·ªØ li·ªáu x·ªï s·ªë mi·ªÅn B·∫Øc</h2>
        
        <p><strong>‚úÖ Tr·∫°ng th√°i:</strong> Th√†nh c√¥ng</p>
        <p><strong>üìÖ Ng√†y:</strong> {date}</p>
        <p><strong>üåê Ngu·ªìn:</strong> {source}</p>
        <p><strong>‚è∞ Th·ªùi gian:</strong> {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}</p>
        
        <h3>Chi ti·∫øt k·∫øt qu·∫£:</h3>
        <ul>
        """
        
        results = data.get('results', {})
        for prize, numbers in results.items():
            if isinstance(numbers, list):
                numbers_str = ', '.join(map(str, numbers))
                email_body += f"<li><strong>{prize}:</strong> {numbers_str}</li>"
        
        email_body += """
        </ul>
        
        <p>D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u tr·ªØ th√†nh c√¥ng v√†o h·ªá th·ªëng v√† s·∫µn s√†ng cho ph√¢n t√≠ch.</p>
        """
        
        self.send_email_notification(subject, email_body, is_html=True)
    
    def notify_failure(self, error_message: str, details: Optional[Dict] = None):
        """Th√¥ng b√°o khi thu th·∫≠p d·ªØ li·ªáu th·∫•t b·∫°i"""
        # Log status
        self.log_status(
            'FAILURE',
            f'Thu th·∫≠p d·ªØ li·ªáu th·∫•t b·∫°i: {error_message}',
            details
        )
        
        # T·∫°o th√¥ng b√°o
        subject = f"‚ùå Thu th·∫≠p x·ªï s·ªë th·∫•t b·∫°i - {datetime.now().strftime('%d/%m/%Y')}"
        message = f"""
üö® **C·∫£nh b√°o: Thu th·∫≠p d·ªØ li·ªáu x·ªï s·ªë th·∫•t b·∫°i**

‚ùå **Tr·∫°ng th√°i:** Th·∫•t b·∫°i
üìÖ **Ng√†y:** {datetime.now().strftime('%d/%m/%Y')}
‚è∞ **Th·ªùi gian:** {datetime.now().strftime('%H:%M:%S')}
üîç **L·ªói:** {error_message}

Vui l√≤ng ki·ªÉm tra h·ªá th·ªëng v√† th·ª≠ l·∫°i.
        """.strip()
        
        # G·ª≠i th√¥ng b√°o kh·∫©n c·∫•p
        self.send_webhook_notification(message, 'discord')
        
        # Email chi ti·∫øt
        email_body = f"""
        <h2>üö® C·∫£nh b√°o: Thu th·∫≠p d·ªØ li·ªáu x·ªï s·ªë th·∫•t b·∫°i</h2>
        
        <p><strong>‚ùå Tr·∫°ng th√°i:</strong> Th·∫•t b·∫°i</p>
        <p><strong>üìÖ Ng√†y:</strong> {datetime.now().strftime('%d/%m/%Y')}</p>
        <p><strong>‚è∞ Th·ªùi gian:</strong> {datetime.now().strftime('%H:%M:%S')}</p>
        <p><strong>üîç L·ªói:</strong> {error_message}</p>
        
        <h3>Chi ti·∫øt l·ªói:</h3>
        <pre>{json.dumps(details, ensure_ascii=False, indent=2) if details else 'Kh√¥ng c√≥ chi ti·∫øt'}</pre>
        
        <p><strong>H√†nh ƒë·ªông c·∫ßn thi·∫øt:</strong></p>
        <ul>
            <li>Ki·ªÉm tra k·∫øt n·ªëi internet</li>
            <li>Ki·ªÉm tra tr·∫°ng th√°i website ngu·ªìn</li>
            <li>Xem logs chi ti·∫øt trong GitHub Actions</li>
            <li>Th·ª≠ ch·∫°y l·∫°i workflow th·ªß c√¥ng</li>
        </ul>
        """
        
        self.send_email_notification(subject, email_body, is_html=True)
    
    def notify_validation_error(self, errors: List[str]):
        """Th√¥ng b√°o khi c√≥ l·ªói validation d·ªØ li·ªáu"""
        error_count = len(errors)
        
        # Log status
        self.log_status(
            'VALIDATION_ERROR',
            f'Ph√°t hi·ªán {error_count} l·ªói validation',
            {'errors': errors}
        )
        
        subject = f"‚ö†Ô∏è L·ªói validation d·ªØ li·ªáu - {datetime.now().strftime('%d/%m/%Y')}"
        message = f"""
‚ö†Ô∏è **C·∫£nh b√°o: L·ªói validation d·ªØ li·ªáu**

üìä **S·ªë l·ªói:** {error_count}
üìÖ **Ng√†y:** {datetime.now().strftime('%d/%m/%Y')}
‚è∞ **Th·ªùi gian:** {datetime.now().strftime('%H:%M:%S')}

D·ªØ li·ªáu c√≥ th·ªÉ kh√¥ng ch√≠nh x√°c, c·∫ßn ki·ªÉm tra th·ªß c√¥ng.
        """.strip()
        
        self.send_webhook_notification(message, 'discord')
    
    def get_system_health(self) -> Dict:
        """L·∫•y th√¥ng tin s·ª©c kh·ªèe h·ªá th·ªëng"""
        try:
            if self.status_file.exists():
                with open(self.status_file, 'r', encoding='utf-8') as f:
                    last_status = json.load(f)
            else:
                last_status = None
            
            # Ki·ªÉm tra file d·ªØ li·ªáu
            json_file = self.data_dir / "lottery-results.json"
            csv_file = self.data_dir / "lottery-results.csv"
            
            health = {
                'last_run': last_status,
                'data_files': {
                    'json_exists': json_file.exists(),
                    'csv_exists': csv_file.exists(),
                    'json_size': json_file.stat().st_size if json_file.exists() else 0,
                    'csv_size': csv_file.stat().st_size if csv_file.exists() else 0
                },
                'system_status': 'healthy' if last_status and last_status.get('status') == 'SUCCESS' else 'warning'
            }
            
            return health
            
        except Exception as e:
            logger.error("L·ªói l·∫•y system health", error=str(e))
            return {'error': str(e)}


def main():
    """Test notification system"""
    notifier = NotificationSystem()
    
    # Test th√¥ng b√°o th√†nh c√¥ng
    test_data = {
        'date': '08/01/2025',
        'source': 'Test Source',
        'results': {
            'Gi·∫£i ƒê·∫∑c Bi·ªát': ['12345'],
            'Gi·∫£i Nh·∫•t': ['67890']
        }
    }
    
    notifier.notify_success(test_data)
    
    # Hi·ªÉn th·ªã system health
    health = notifier.get_system_health()
    logger.info("System health", health=health)


if __name__ == "__main__":
    main()
